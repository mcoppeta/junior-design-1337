window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "exodusutils", "modulename": "exodusutils", "type": "module", "doc": "<h1 id=\"introduction\">Introduction</h1>\n\n<p>Python Exodus Utilities is a Python library for interfacing with Exodus II files and assisting in performing some common\ntasks. This library's only requirements are Python 3.7 or newer, <a href=\"https://numpy.org/\">numpy</a>, and\n<a href=\"https://unidata.github.io/netcdf4-python/\">netcdf4-python</a>.</p>\n\n<p>The primary purpose of this library is to allow uses to easily read and modify Exodus II files without having to go\nthrough a more complicated interface or wrapper library. This library also includes some helpful functions for writing\nout a subset of a mesh, determining the difference between two files, merging and splitting sets, and more.</p>\n\n<p>Python Exodus Utilities supports most basic Exodus II features defined in\n<a href=\"https://www.osti.gov/servlets/purl/10102115\">SAND92-2137</a> and the\n<a href=\"https://gsjaardema.github.io/seacas-docs/exodusII-new.pdf\">new documentation</a>, but lacks newer and more complicated\nfeatures from the <a href=\"https://gsjaardema.github.io/seacas-docs/sphinx/html/index.html#exodus-library\">C library</a> such as\nassembly.</p>\n\n<h1 id=\"tutorial\">Tutorial</h1>\n\n<h2 id=\"opening-and-closing-an-exodus-ii-file\">Opening and closing an Exodus II file</h2>\n\n<h2 id=\"difference-between-two-exodus-ii-files\">Difference between two Exodus II files</h2>\n\n<h2 id=\"output-a-subset-of-an-exodus-ii-file\">Output a subset of an Exodus II file</h2>\n\n<h2 id=\"skinning-a-mesh\">Skinning a mesh</h2>\n\n<h2 id=\"adding-data-to-an-exodus-ii-file\">Adding data to an Exodus II file</h2>\n\n<h2 id=\"removing-data-from-an-exodus-ii-file\">Removing data from an Exodus II file</h2>\n"}, {"fullname": "exodusutils.constants", "modulename": "exodusutils.constants", "type": "module", "doc": "<p>Constants used by the Python Exodus Utilities library.</p>\n"}, {"fullname": "exodusutils.constants.ELEMBLOCK", "modulename": "exodusutils.constants", "qualname": "ELEMBLOCK", "type": "variable", "doc": "<p>Represents an element block.</p>\n", "default_value": " = 'elblock'"}, {"fullname": "exodusutils.constants.NODESET", "modulename": "exodusutils.constants", "qualname": "NODESET", "type": "variable", "doc": "<p>Represents a node set.</p>\n", "default_value": " = 'nodeset'"}, {"fullname": "exodusutils.constants.SIDESET", "modulename": "exodusutils.constants", "qualname": "SIDESET", "type": "variable", "doc": "<p>Represents a side set.</p>\n", "default_value": " = 'sideset'"}, {"fullname": "exodusutils.constants.GLOBAL_VAR", "modulename": "exodusutils.constants", "qualname": "GLOBAL_VAR", "type": "variable", "doc": "<p>Represents global variables.</p>\n", "default_value": " = 'global'"}, {"fullname": "exodusutils.constants.NODAL_VAR", "modulename": "exodusutils.constants", "qualname": "NODAL_VAR", "type": "variable", "doc": "<p>Represents nodal variables.</p>\n", "default_value": " = 'node'"}, {"fullname": "exodusutils.constants.ELEMENTAL_VAR", "modulename": "exodusutils.constants", "qualname": "ELEMENTAL_VAR", "type": "variable", "doc": "<p>Represents elemental variables.</p>\n", "default_value": " = 'elem'"}, {"fullname": "exodusutils.constants.NODESET_VAR", "modulename": "exodusutils.constants", "qualname": "NODESET_VAR", "type": "variable", "doc": "<p>Represents node set variables.</p>\n", "default_value": " = 'nodeset'"}, {"fullname": "exodusutils.constants.SIDESET_VAR", "modulename": "exodusutils.constants", "qualname": "SIDESET_VAR", "type": "variable", "doc": "<p>Represents side set variables.</p>\n", "default_value": " = 'sideset'"}, {"fullname": "exodusutils.exodus", "modulename": "exodusutils.exodus", "type": "module", "doc": "<p>This module contains the <code>Exodus</code> class that is used to open Exodus II files. The <code>Exodus</code> class contains many functions\nfor reading from and writing to the associated Exodus II file as well as determining the difference between two files.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus", "modulename": "exodusutils.exodus", "qualname": "Exodus", "type": "class", "doc": "<p>The Exodus class represents an opened Exodus II file.</p>\n\n<p>The first step in doing anything to an Exodus II file is to create a new Exodus object from it (See\n<code>Exodus.__init__</code> for how to do this).</p>\n\n<p>You can read and modify an Exodus II file using <code>Exodus</code>'s properties and functions. You may not modify\nproperties, but you can get them with minimal performance impact. Calling any functions will read data from the file\non disk, and this data is not cached by the library, so you should avoid multiple identical function calls whenever\npossible.</p>\n\n<p>Many of the functions of <code>Exodus</code> require \"1-based\" indices. To clarify: Exodus data is usually accessed starting\nfrom 1 rather than 0 as is more common in computer programming. If a function requests 1-based indices that means\nlist indexing starts at 1. If a function requests 0-based indices that means list indexing starts at 0.</p>\n\n<p>Once you are finished with the Exodus II file, call <code>Exodus.close</code> to safely close the file.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.__init__", "modulename": "exodusutils.exodus", "qualname": "Exodus.__init__", "type": "function", "doc": "<p>Exodus constructor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  path to the Exodus II file to open as a string.</li>\n<li><strong>mode</strong>:  access mode. 'r' opens the file in read only mode. 'a' is append mode; it allows you to modify the\nfile as well as read from it. 'w' is write mode; it creates a new file at the specified path and opens it as in\nappend mode.</li>\n<li><strong>shared</strong>:  if <code>True</code> the file will open with unbuffered shared access for NetCDF 3 classic, 64bit offset,\nand 64bit data models (EX_NORMAL_MODEL, EX_LARGE_MODEL, EX_64BIT_DATA).</li>\n<li><strong>format</strong>:  if <code>mode</code> is 'w' then this is the underlying netCDF format the database will use.</li>\n<li><strong>word_size</strong>:  if <code>mode</code> is 'w' then this is the floating point word size used in the database.</li>\n</ul>\n", "signature": "(self, path, mode, shared=False, format='EX_NETCDF4', word_size=4)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.to_float", "modulename": "exodusutils.exodus", "qualname": "Exodus.to_float", "type": "function", "doc": "<p>Returns <code>n</code> converted to the floating-point type stored in the database.</p>\n", "signature": "(self, n)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.to_int", "modulename": "exodusutils.exodus", "qualname": "Exodus.to_int", "type": "function", "doc": "<p>Returns <code>n</code> converted to the integer type stored in the database.</p>\n", "signature": "(self, n)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.float", "modulename": "exodusutils.exodus", "qualname": "Exodus.float", "type": "variable", "doc": "<p>The floating-point type stored in the database.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.int", "modulename": "exodusutils.exodus", "qualname": "Exodus.int", "type": "variable", "doc": "<p>The integer type stored in the database.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.title", "modulename": "exodusutils.exodus", "qualname": "Exodus.title", "type": "variable", "doc": "<p>The database title.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.max_allowed_name_length", "modulename": "exodusutils.exodus", "qualname": "Exodus.max_allowed_name_length", "type": "variable", "doc": "<p>The maximum allowed length for variable/dimension/attribute names in this database.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.max_used_name_length", "modulename": "exodusutils.exodus", "qualname": "Exodus.max_used_name_length", "type": "variable", "doc": "<p>The maximum used length for variable/dimension/attribute names in this database.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.max_string_length", "modulename": "exodusutils.exodus", "qualname": "Exodus.max_string_length", "type": "variable", "doc": "<p>Maximum QA record string length.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.max_line_length", "modulename": "exodusutils.exodus", "qualname": "Exodus.max_line_length", "type": "variable", "doc": "<p>Maximum info record line length.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.api_version", "modulename": "exodusutils.exodus", "qualname": "Exodus.api_version", "type": "variable", "doc": "<p>The Exodus API version this database was built with.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.version", "modulename": "exodusutils.exodus", "qualname": "Exodus.version", "type": "variable", "doc": "<p>The Exodus version this database uses.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.large_model", "modulename": "exodusutils.exodus", "qualname": "Exodus.large_model", "type": "variable", "doc": "<p>Describes how coordinates are stored in this database.</p>\n\n<p>If true: nodal coordinates and variables are stored in separate x, y, z variables.\nIf false: nodal coordinates and variables are stored in a single variable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>1 if stored separately (large), 0 if stored in a blob</p>\n</blockquote>\n"}, {"fullname": "exodusutils.exodus.Exodus.int64_status", "modulename": "exodusutils.exodus", "qualname": "Exodus.int64_status", "type": "variable", "doc": "<p>64-bit integer support for this database.</p>\n\n<p>Use <code>int()</code> to get the integer type used by this database.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>1 if 64-bit integers are supported, 0 otherwise</p>\n</blockquote>\n"}, {"fullname": "exodusutils.exodus.Exodus.word_size", "modulename": "exodusutils.exodus", "qualname": "Exodus.word_size", "type": "variable", "doc": "<p>Word size of floating point variables in this database.</p>\n\n<p>Use <code>float()</code> to get the float type used by this database.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>floating point word size</p>\n</blockquote>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_qa", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_qa", "type": "variable", "doc": "<p>Number of QA records.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_info", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_info", "type": "variable", "doc": "<p>Number of info records.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_dim", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_dim", "type": "variable", "doc": "<p>Number of dimensions (coordinate axes) used in the model.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_nodes", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_nodes", "type": "variable", "doc": "<p>Number of nodes stored in this database.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_elem", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_elem", "type": "variable", "doc": "<p>Number of elements stored in this database.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_elem_blk", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_elem_blk", "type": "variable", "doc": "<p>Number of element blocks stored in this database.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_node_sets", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_node_sets", "type": "variable", "doc": "<p>Number of node sets stored in this database.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_side_sets", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_side_sets", "type": "variable", "doc": "<p>Number of side sets stored in this database.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_time_steps", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_time_steps", "type": "variable", "doc": "<p>Number of time steps stored in this database.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_elem_block_prop", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_elem_block_prop", "type": "variable", "doc": "<p>Number of element block properties in this database.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_node_set_prop", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_node_set_prop", "type": "variable", "doc": "<p>Number of node set properties in this database.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_side_set_prop", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_side_set_prop", "type": "variable", "doc": "<p>Number of side set properties in this database.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_global_var", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_global_var", "type": "variable", "doc": "<p>Number of global variables.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_node_var", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_node_var", "type": "variable", "doc": "<p>Number of nodal variables.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_elem_block_var", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_elem_block_var", "type": "variable", "doc": "<p>Number of elemental variables.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_node_set_var", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_node_set_var", "type": "variable", "doc": "<p>Number of node set variables.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.num_side_set_var", "modulename": "exodusutils.exodus", "qualname": "Exodus.num_side_set_var", "type": "variable", "doc": "<p>Number of side set variables.</p>\n"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_order_map", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_order_map", "type": "function", "doc": "<p>Returns the optional element order map for this database.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_id_map", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_id_map", "type": "function", "doc": "<p>Return the node ID map for this database.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_reverse_node_id_dict", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_reverse_node_id_dict", "type": "function", "doc": "<p>Returns a dictionary with user-defined IDs as the keys and internal IDs as the values.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_node_id_map", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_node_id_map", "type": "function", "doc": "<p>Return a subset of the node ID map for this database.</p>\n\n<p>Subset starts at node number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(self, start, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_id_map", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_id_map", "type": "function", "doc": "<p>Return the element ID map for this database.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_reverse_elem_id_dict", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_reverse_elem_id_dict", "type": "function", "doc": "<p>Returns a dictionary with user-defined IDs as the keys and internal IDs as the values.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_elem_id_map", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_elem_id_map", "type": "function", "doc": "<p>Return a subset of the element ID map for this database.</p>\n\n<p>Subset starts at element number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(self, start, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_id_map_for_block", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_id_map_for_block", "type": "function", "doc": "<p>Reads the element ID map for the element block with specified ID.</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_id_map", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_id_map", "type": "function", "doc": "<p>Returns the id map for node sets (ns_prop1).</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_id_map", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_id_map", "type": "function", "doc": "<p>Returns the id map for side sets (ss_prop1).</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_block_id_map", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_block_id_map", "type": "function", "doc": "<p>Returns the id map for element blocks (eb_prop1).</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_number", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_number", "type": "function", "doc": "<p>Returns the internal ID (1-based) of the node set with the user-defined ID.</p>\n\n<p>Note that this function is O(n) complexity for n number of node sets. While useful for quick tests, you should\ncreate an ID lookup table yourself if you plan to convert IDs often.</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_number", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_number", "type": "function", "doc": "<p>Returns the internal ID (1-based) of the side set with the user-defined ID.</p>\n\n<p>Note that this function is O(n) complexity for n number of node sets. While useful for quick tests, you should\ncreate an ID lookup table yourself if you plan to convert IDs often.</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_block_number", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_block_number", "type": "function", "doc": "<p>Returns the internal ID (1-based) of the elem block with the user-defined ID.</p>\n\n<p>Note that this function is O(n) complexity for n number of node sets. While useful for quick tests, you should\ncreate an ID lookup table yourself if you plan to convert IDs often.</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_all_times", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_all_times", "type": "function", "doc": "<p>Returns an array of all time values from all time steps from this database.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_time", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_time", "type": "function", "doc": "<p>Returns the time value for specified time step.</p>\n\n<p>Time steps are 1-indexed. The first time step is at 1, and the last at num_time_steps.</p>\n", "signature": "(self, time_step)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_nodal_var_at_time", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_nodal_var_at_time", "type": "function", "doc": "<p>Returns the values of the nodal variable with given index at specified time step.</p>\n\n<p>Time step and variable index are both 1-based. First time step is at 1, last at num_time_steps.</p>\n", "signature": "(self, time_step, var_index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_nodal_var_across_times", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_nodal_var_across_times", "type": "function", "doc": "<p>Returns the values of the nodal variable with given index between specified time steps (inclusive).</p>\n\n<p>Time steps and variable index are both 1-based. First time step is at 1, last at num_time_steps.</p>\n", "signature": "(self, start_time_step, end_time_step, var_index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_nodal_var_across_times", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_nodal_var_across_times", "type": "function", "doc": "<p>Returns partial values of a nodal variable between specified time steps (inclusive).</p>\n\n<p>Time steps, variable index, ID and start index are all 1-based. First time step is at 1, last at num_time_steps.\nArray starts at element number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(self, start_time_step, end_time_step, var_index, start_index, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_global_vars_at_time", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_global_vars_at_time", "type": "function", "doc": "<p>Returns the values of the all global variables at specified time step.</p>\n\n<p>Time steps are 1-based. First time step is at 1, last at num_time_steps.</p>\n", "signature": "(self, time_step)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_global_vars_across_times", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_global_vars_across_times", "type": "function", "doc": "<p>Returns the values of the all global variables between specified time steps (inclusive).</p>\n\n<p>Time steps are 1-based. First time step is at 1, last at num_time_steps.</p>\n", "signature": "(self, start_time_step, end_time_step)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_global_var_at_time", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_global_var_at_time", "type": "function", "doc": "<p>Returns the values of the global variable with given index at specified time step.</p>\n\n<p>Time step and variable index are both 1-based. First time step is at 1, last at num_time_steps.</p>\n", "signature": "(self, time_step, var_index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_global_var_across_times", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_global_var_across_times", "type": "function", "doc": "<p>Returns the values of the global variable with given index between specified time steps (inclusive).</p>\n\n<p>Time steps and variable index are both 1-based. First time step is at 1, last at num_time_steps.</p>\n", "signature": "(self, start_time_step, end_time_step, var_index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_block_var_at_time", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_block_var_at_time", "type": "function", "doc": "<p>Returns the values of variable with index stored in the element block with id at time step.</p>\n\n<p>Time step, variable index, and ID are all 1-based. First time step is at 1, last at num_time_steps.</p>\n", "signature": "(self, obj_id, time_step, var_index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_block_var_across_times", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_block_var_across_times", "type": "function", "doc": "<p>Returns the values of variable with index stored in the element block with id between time steps (inclusive).</p>\n\n<p>Time steps, variable index, and ID are all 1-based. First time step is at 1, last at num_time_steps.</p>\n", "signature": "(self, obj_id, start_time_step, end_time_step, var_index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_elem_block_var_across_times", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_elem_block_var_across_times", "type": "function", "doc": "<p>Returns partial values of an element block variable between specified time steps (inclusive).</p>\n\n<p>Time steps, variable index, ID and start index are all 1-based. First time step is at 1, last at num_time_steps.\nArray starts at element number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(\n    self,\n    obj_id,\n    start_time_step,\n    end_time_step,\n    var_index,\n    start_index,\n    count\n)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_var_at_time", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_var_at_time", "type": "function", "doc": "<p>Returns the values of variable with index stored in the node set with id at time step.</p>\n\n<p>Time step, variable index, and ID are all 1-based. First time step is at 1, last at num_time_steps.</p>\n", "signature": "(self, obj_id, time_step, var_index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_var_across_times", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_var_across_times", "type": "function", "doc": "<p>Returns the values of variable with index stored in the node set with id between time steps (inclusive).</p>\n\n<p>Time steps, variable index, and ID are all 1-based. First time step is at 1, last at num_time_steps.</p>\n", "signature": "(self, obj_id, start_time_step, end_time_step, var_index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_node_set_var_across_times", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_node_set_var_across_times", "type": "function", "doc": "<p>Returns partial values of a node set variable between specified time steps (inclusive).</p>\n\n<p>Time steps, variable index, ID and start index are all 1-based. First time step is at 1, last at num_time_steps.\nArray starts at element number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(\n    self,\n    obj_id,\n    start_time_step,\n    end_time_step,\n    var_index,\n    start_index,\n    count\n)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_var_at_time", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_var_at_time", "type": "function", "doc": "<p>Returns the values of variable with index stored in the side set with id at time step.</p>\n\n<p>Time step, variable index, and ID are all 1-based. First time step is at 1, last at num_time_steps.</p>\n", "signature": "(self, obj_id, time_step, var_index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_var_across_times", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_var_across_times", "type": "function", "doc": "<p>Returns the values of variable with index stored in the side set with id between time steps (inclusive).</p>\n\n<p>Time steps, variable index, and ID are all 1-based. First time step is at 1, last at num_time_steps.</p>\n", "signature": "(self, obj_id, start_time_step, end_time_step, var_index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_side_set_var_across_times", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_side_set_var_across_times", "type": "function", "doc": "<p>Returns partial values of a side set variable between specified time steps (inclusive).</p>\n\n<p>Time steps, variable index, ID and start index are all 1-based. First time step is at 1, last at num_time_steps.\nArray starts at element number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(\n    self,\n    obj_id,\n    start_time_step,\n    end_time_step,\n    var_index,\n    start_index,\n    count\n)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_block_truth_table", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_block_truth_table", "type": "function", "doc": "<p>Returns the variable truth table for element blocks.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_truth_table", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_truth_table", "type": "function", "doc": "<p>Returns the variable truth table for node sets.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_truth_table", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_truth_table", "type": "function", "doc": "<p>Returns the variable truth table for side sets.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.has_var_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.has_var_names", "type": "function", "doc": "<p>Test if this Exodus file has variable names for a variable type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>var_type</strong>:  GLOBAL_VAR, NODAL_VAR, ELEMENTAL_VAR, NODESET_VAR, or SIDESET_VAR from <code>exodusutils.constants</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if this variable type has names defined, false otherwise</p>\n</blockquote>\n", "signature": "(self, var_type: <function NewType.<locals>.new_type>)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_global_var_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_global_var_names", "type": "function", "doc": "<p>Returns a list of all global variable names. Index of the variable is the index of the name + 1.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_nodal_var_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_nodal_var_names", "type": "function", "doc": "<p>Returns a list of all nodal variable names. Index of the variable is the index of the name + 1.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_var_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_var_names", "type": "function", "doc": "<p>Returns a list of all element variable names. Index of the variable is the index of the name + 1.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_var_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_var_names", "type": "function", "doc": "<p>Returns a list of all node set variable names. Index of the variable is the index of the name + 1.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_var_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_var_names", "type": "function", "doc": "<p>Returns a list of all node set variable names. Index of the variable is the index of the name + 1.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_global_var_name", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_global_var_name", "type": "function", "doc": "<p>Returns the name of the global variable with the given index.</p>\n", "signature": "(self, index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_nodal_var_name", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_nodal_var_name", "type": "function", "doc": "<p>Returns the name of the nodal variable with the given index.</p>\n", "signature": "(self, index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_var_name", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_var_name", "type": "function", "doc": "<p>Returns the name of the element variable with the given index.</p>\n", "signature": "(self, index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_var_name", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_var_name", "type": "function", "doc": "<p>Returns the name of the node set variable with the given index.</p>\n", "signature": "(self, index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_var_name", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_var_name", "type": "function", "doc": "<p>Returns the name of the side set variable with the given index.</p>\n", "signature": "(self, index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set", "type": "function", "doc": "<p>Returns an array of the nodes contained in the node set with given ID.</p>\n", "signature": "(self, identifier)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_node_set", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_node_set", "type": "function", "doc": "<p>Returns a partial array of the nodes contained in the node set with given ID.</p>\n\n<p>Array starts at node number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(self, identifier, start, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_df", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_df", "type": "function", "doc": "<p>Returns an array containing the distribution factors in the node set with given ID.</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_node_set_df", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_node_set_df", "type": "function", "doc": "<p>Returns a partial array of the distribution factors contained in the node set with given ID.</p>\n\n<p>Array starts at node number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(self, obj_id, start, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_params", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_params", "type": "function", "doc": "<p>Returns a tuple containing the parameters for the node set with given ID.</p>\n\n<p>Returned tuple is of format (number of nodes, number of distribution factors).</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set", "type": "function", "doc": "<p>Returns tuple containing the elements and sides contained in the side set with given ID.</p>\n\n<p>Returned tuple is of format (elements in side set, sides in side set).</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_node_count_list", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_node_count_list", "type": "function", "doc": "<p>Returns array of number of nodes per side/face.</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_node_list", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_node_list", "type": "function", "doc": "<p>Returns array of nodes for this side set and the node count list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>(node list, node count list)</p>\n</blockquote>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_side_set", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_side_set", "type": "function", "doc": "<p>Returns tuple containing a subset of the elements and sides contained in the side set with given ID.</p>\n\n<p>Arrays start at element number <code>start</code> (1-based) and contains <code>count</code> elements.\nReturned tuple is of format (elements in side set, sides in side set).</p>\n", "signature": "(self, obj_id, start, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_df", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_df", "type": "function", "doc": "<p>Returns an array containing the distribution factors in the side set with given ID.</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_side_set_df", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_side_set_df", "type": "function", "doc": "<p>Returns a partial array of the distribution factors contained in the side set with given ID.</p>\n\n<p>Array starts at element number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(self, obj_id, start, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_params", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_params", "type": "function", "doc": "<p>Returns a tuple containing the parameters for the side set with given ID.</p>\n\n<p>Returned tuple is of format (number of elements, number of distribution factors).</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_block_connectivity", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_block_connectivity", "type": "function", "doc": "<p>Returns the connectivity list for the element block with given ID.</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_elem_block_connectivity", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_elem_block_connectivity", "type": "function", "doc": "<p>Returns a partial connectivity list for the element block with given ID.</p>\n\n<p>Array starts at element number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(self, obj_id, start, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_block_params", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_block_params", "type": "function", "doc": "<p>Returns a tuple containing the parameters for the element block with given ID.</p>\n\n<p>Returned tuple is of format (number of elements, nodes per element, topology, number of attributes).</p>\n", "signature": "(self, obj_id) -> Tuple[int, int, str, int]", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_block_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_block_names", "type": "function", "doc": "<p>Returns an array containing the names of element blocks in this database.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_block_name", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_block_name", "type": "function", "doc": "<p>Returns the name of the given element block.</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_names", "type": "function", "doc": "<p>Returns an array containing the names of node sets in this database.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_name", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_name", "type": "function", "doc": "<p>Returns the name of the given node set.</p>\n", "signature": "(self, identifier)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_names", "type": "function", "doc": "<p>Returns an array containing the names of side sets in this database.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_name", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_name", "type": "function", "doc": "<p>Returns the name of the given side set.</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_one_elem_attrib", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_one_elem_attrib", "type": "function", "doc": "<p>Returns a partial list of one attribute for the specified elements in the element block with given ID.</p>\n\n<p>Array starts at element number <code>start</code> (1-based) and contains <code>count</code> elements.\nReturns an empty array if the element block doesn't have attributes.</p>\n", "signature": "(self, obj_id, attrib_index, start, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_one_elem_attrib", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_one_elem_attrib", "type": "function", "doc": "<p>Returns a list of one attribute for each element in the element block with given ID.</p>\n\n<p>Returns an empty array if the element block doesn't have attributes.</p>\n", "signature": "(self, obj_id, attrib_index)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_attrib", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_attrib", "type": "function", "doc": "<p>Returns a list of all attributes for each element in the element block with given ID.</p>\n\n<p>Returns an empty array if the element block doesn't have attributes.</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_elem_attrib", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_elem_attrib", "type": "function", "doc": "<p>Returns a partial list of all attributes for the specified elements in the element block with given ID.</p>\n\n<p>Array starts at element number <code>start</code> (1-based) and contains <code>count</code> elements.\nReturns an empty array if the element block doesn't have attributes.</p>\n", "signature": "(self, obj_id, start, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_attrib_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_attrib_names", "type": "function", "doc": "<p>Returns a list of the names of attributes in the element block with given ID.</p>\n\n<p>Returns an empty array if the element block doesn't have attributes or attribute names.</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_num_elem_attrib", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_num_elem_attrib", "type": "function", "doc": "<p>Returns the number of attributes in the element block with given ID.</p>\n", "signature": "(self, obj_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_property", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_property", "type": "function", "doc": "<p>Returns the value of the specified property for the node set with the given ID.</p>\n", "signature": "(self, obj_id, name)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_property", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_property", "type": "function", "doc": "<p>Returns the value of the specified property for the side set with the given ID.</p>\n", "signature": "(self, obj_id, name)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_block_property", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_block_property", "type": "function", "doc": "<p>Returns the value of the specified property for the element block with the given ID.</p>\n", "signature": "(self, obj_id, name)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_property_array", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_property_array", "type": "function", "doc": "<p>Returns a list containing the values of the specified property for all node sets.</p>\n", "signature": "(self, name)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_property_array", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_property_array", "type": "function", "doc": "<p>Returns a list containing the values of the specified property for all side sets.</p>\n", "signature": "(self, name)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_block_property_array", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_block_property_array", "type": "function", "doc": "<p>Returns a list containing the values of the specified property for all element blocks.</p>\n", "signature": "(self, name)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_node_set_property_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_node_set_property_names", "type": "function", "doc": "<p>Returns a list of node set property names.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_side_set_property_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_side_set_property_names", "type": "function", "doc": "<p>Returns a list of side set property names.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_elem_block_property_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_elem_block_property_names", "type": "function", "doc": "<p>Returns a list of element block property names.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_coords", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_coords", "type": "function", "doc": "<p>Returns a multidimensional array containing the coordinates of all nodes.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_coords", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_coords", "type": "function", "doc": "<p>Returns a multidimensional array containing the coordinates of the specified set of nodes.</p>\n\n<p>Array starts at node number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(self, start, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_coord_x", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_coord_x", "type": "function", "doc": "<p>Returns an array containing the x coordinate of all nodes.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_coord_x", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_coord_x", "type": "function", "doc": "<p>Returns an array containing the x coordinate of the specified set of nodes.</p>\n\n<p>Array starts at node number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(self, start, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_coord_y", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_coord_y", "type": "function", "doc": "<p>Returns an array containing the y coordinate of all nodes.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_coord_y", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_coord_y", "type": "function", "doc": "<p>Returns an array containing the y coordinate of the specified set of nodes.</p>\n\n<p>Array starts at node number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(self, start, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_coord_z", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_coord_z", "type": "function", "doc": "<p>Returns an array containing the z coordinate of all nodes.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_partial_coord_z", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_partial_coord_z", "type": "function", "doc": "<p>Returns an array containing the z coordinate of the specified set of nodes.</p>\n\n<p>Array starts at node number <code>start</code> (1-based) and contains <code>count</code> elements.</p>\n", "signature": "(self, start, count)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_coord_names", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_coord_names", "type": "function", "doc": "<p>Returns an array containing the names of the coordinate axes in this database.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_info", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_info", "type": "function", "doc": "<p>Returns an array containing the info records stored in this database.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_qa", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_qa", "type": "function", "doc": "<p>Returns an n x 4 array containing the QA records stored in this database.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.close", "modulename": "exodusutils.exodus", "qualname": "Exodus.close", "type": "function", "doc": "<p>Close the Exodus II file.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.time_steps", "modulename": "exodusutils.exodus", "qualname": "Exodus.time_steps", "type": "function", "doc": "<p>Returns list of the time steps, 0-indexed</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.step_at_time", "modulename": "exodusutils.exodus", "qualname": "Exodus.step_at_time", "type": "function", "doc": "<p>Given a float time value, return the corresponding time step</p>\n", "signature": "(self, time)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.set_nodeset", "modulename": "exodusutils.exodus", "qualname": "Exodus.set_nodeset", "type": "function", "doc": "<p></p>\n", "signature": "(self, node_set_id, node_ids)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.get_nodes_in_elblock", "modulename": "exodusutils.exodus", "qualname": "Exodus.get_nodes_in_elblock", "type": "function", "doc": "<p></p>\n", "signature": "(self, id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.diff", "modulename": "exodusutils.exodus", "qualname": "Exodus.diff", "type": "function", "doc": "<p></p>\n", "signature": "(self, other)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.diff_nodeset", "modulename": "exodusutils.exodus", "qualname": "Exodus.diff_nodeset", "type": "function", "doc": "<p>Prints the overlap and difference between two nodesets</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id</strong>:  the nodeset ID of the self Exodus object</li>\n<li><strong>other</strong>:  the other Exodus object to compare to</li>\n<li><strong>id2</strong>:  optional parameter specifying the nodeset ID of other Exodus object. Default to the first id.</li>\n</ul>\n", "signature": "(self, id, other, id2=None)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.add_nodeset", "modulename": "exodusutils.exodus", "qualname": "Exodus.add_nodeset", "type": "function", "doc": "<p></p>\n", "signature": "(self, node_ids, nodeset_id, nodeset_name='')", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.remove_nodeset", "modulename": "exodusutils.exodus", "qualname": "Exodus.remove_nodeset", "type": "function", "doc": "<p></p>\n", "signature": "(self, identifier)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.merge_nodeset", "modulename": "exodusutils.exodus", "qualname": "Exodus.merge_nodeset", "type": "function", "doc": "<p></p>\n", "signature": "(self, new_id, ns1, ns2, delete=True)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.add_node_to_nodeset", "modulename": "exodusutils.exodus", "qualname": "Exodus.add_node_to_nodeset", "type": "function", "doc": "<p></p>\n", "signature": "(self, node_id, identifier)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.add_nodes_to_nodeset", "modulename": "exodusutils.exodus", "qualname": "Exodus.add_nodes_to_nodeset", "type": "function", "doc": "<p></p>\n", "signature": "(self, node_ids, identifier)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.remove_node_from_nodeset", "modulename": "exodusutils.exodus", "qualname": "Exodus.remove_node_from_nodeset", "type": "function", "doc": "<p></p>\n", "signature": "(self, node_id, identifier)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.remove_nodes_from_nodeset", "modulename": "exodusutils.exodus", "qualname": "Exodus.remove_nodes_from_nodeset", "type": "function", "doc": "<p></p>\n", "signature": "(self, node_ids, identifier)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.add_sideset", "modulename": "exodusutils.exodus", "qualname": "Exodus.add_sideset", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    elem_ids,\n    side_ids,\n    ss_id,\n    ss_name,\n    dist_fact=None,\n    variables=None\n)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.remove_sideset", "modulename": "exodusutils.exodus", "qualname": "Exodus.remove_sideset", "type": "function", "doc": "<p></p>\n", "signature": "(self, ss_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.add_sides_to_sideset", "modulename": "exodusutils.exodus", "qualname": "Exodus.add_sides_to_sideset", "type": "function", "doc": "<p></p>\n", "signature": "(self, elem_ids, side_ids, ss_id, dist_facts=None, variables=None)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.remove_sides_from_sideset", "modulename": "exodusutils.exodus", "qualname": "Exodus.remove_sides_from_sideset", "type": "function", "doc": "<p></p>\n", "signature": "(self, elem_ids, side_ids, ss_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.split_sideset", "modulename": "exodusutils.exodus", "qualname": "Exodus.split_sideset", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    old_ss,\n    function,\n    ss_id1,\n    ss_id2,\n    delete,\n    ss_name1='',\n    ss_name2=''\n)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.split_sideset_x_coords", "modulename": "exodusutils.exodus", "qualname": "Exodus.split_sideset_x_coords", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    old_ss,\n    comparison,\n    x_value,\n    all_nodes,\n    ss_id1,\n    ss_id2,\n    delete,\n    ss_name1='',\n    ss_name2=''\n)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.split_sideset_y_coords", "modulename": "exodusutils.exodus", "qualname": "Exodus.split_sideset_y_coords", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    old_ss,\n    comparison,\n    y_value,\n    all_nodes,\n    ss_id1,\n    ss_id2,\n    delete,\n    ss_name1='',\n    ss_name2=''\n)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.split_sideset_z_coords", "modulename": "exodusutils.exodus", "qualname": "Exodus.split_sideset_z_coords", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    old_ss,\n    comparison,\n    z_value,\n    all_nodes,\n    ss_id1,\n    ss_id2,\n    delete,\n    ss_name1='',\n    ss_name2=''\n)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.add_element", "modulename": "exodusutils.exodus", "qualname": "Exodus.add_element", "type": "function", "doc": "<p>Returns the id of the newly created element if successful</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>block_id</strong>:  (user-defined) ID for new element</li>\n<li><strong>nodelist</strong>:  list of node IDs that make up the new element</li>\n</ul>\n", "signature": "(self, block_id, nodelist)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.remove_element", "modulename": "exodusutils.exodus", "qualname": "Exodus.remove_element", "type": "function", "doc": "<p>Returns the removed element (the list of nodes)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>elem_id</strong>:  ID of the element to be removed</li>\n</ul>\n", "signature": "(self, elem_id)", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.skin_element_block", "modulename": "exodusutils.exodus", "qualname": "Exodus.skin_element_block", "type": "function", "doc": "<p>Skins a particular element block. Adds a corresponding sideset of the external faces</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>block_id</strong>:  ID of the block to be skinned</li>\n<li><strong>skin_id</strong>:  (user-defined) ID of the new sideset</li>\n<li><strong>skin_name</strong>:  (user-defined) name of the new sideset</li>\n<li><strong>tri</strong>:  indicates if TRI prefix corresponds to tri 'tri' or trishell 'shell'</li>\n</ul>\n", "signature": "(self, block_id, skin_id, skin_name, tri='shell')", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.skin", "modulename": "exodusutils.exodus", "qualname": "Exodus.skin", "type": "function", "doc": "<p>Skins the entire mesh (all element blocks).\nAdds a single corresponding sideset of the external faces</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>block_id</strong>:  ID of the block to be skinned</li>\n<li><strong>skin_id</strong>:  (user-defined) ID of the new sideset</li>\n<li><strong>skin_name</strong>:  (user-defined) name of the new sideset</li>\n<li><strong>tri</strong>:  indicates if TRI prefix corresponds to tri 'tri' or trishell 'shell'</li>\n</ul>\n", "signature": "(self, skin_id, skin_name, tri='shell')", "funcdef": "def"}, {"fullname": "exodusutils.exodus.Exodus.write", "modulename": "exodusutils.exodus", "qualname": "Exodus.write", "type": "function", "doc": "<p></p>\n", "signature": "(self, path=None)", "funcdef": "def"}, {"fullname": "exodusutils.output_subset", "modulename": "exodusutils.output_subset", "type": "module", "doc": "<p>Allows creation of a new Exodus file by copying selected parts of an opened Exodus file.</p>\n\n<p>To choose what parts of a file to keep, you must pass lists of selectors to the <code>output_subset</code> function. See\n<code>exodusutils.selector</code> for more information on how selectors work.</p>\n"}, {"fullname": "exodusutils.output_subset.output_subset", "modulename": "exodusutils.output_subset", "qualname": "output_subset", "type": "function", "doc": "<p>Creates a new Exodus file containing a subset of the mesh stored in another Exodus file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  exodus object of the file to copy a subset of</li>\n<li><strong>path</strong>:  location of the new exodus file</li>\n<li><strong>title</strong>:  name of the new exodus file</li>\n<li><strong>eb_selectors</strong>:  selectors for element blocks to keep</li>\n<li><strong>ss_selectors</strong>:  selectors for side sets to keep</li>\n<li><strong>ns_selectors</strong>:  selectors for node sets to keep</li>\n<li><strong>prop_selector</strong>:  selector for object properties</li>\n<li><strong>nod_vars</strong>:  list of nodal variable ids to keep (1-indexed)</li>\n<li><strong>glo_vars</strong>:  list of global variable ids to keep (1-indexed)</li>\n<li><strong>time_steps</strong>:  range of time steps to keep (1-indexed)</li>\n</ul>\n", "signature": "(\n    input: exodusutils.exodus.Exodus,\n    path: str,\n    title: str,\n    eb_selectors: List[exodusutils.selector.ElementBlockSelector],\n    ss_selectors: List[exodusutils.selector.SideSetSelector],\n    ns_selectors: List[exodusutils.selector.NodeSetSelector],\n    prop_selector: exodusutils.selector.PropertySelector,\n    nod_vars: List[int],\n    glo_vars: List[int],\n    time_steps: List[int]\n)", "funcdef": "def"}, {"fullname": "exodusutils.selector", "modulename": "exodusutils.selector", "type": "module", "doc": "<p>Selectors are used to select a subset of an Exodus file's features.</p>\n\n<p>These are used extensively in <code>exodusutils.output_subset</code>. See that documentation for more details on how to use\nmembers of this module.</p>\n"}, {"fullname": "exodusutils.selector.ElementBlockSelector", "modulename": "exodusutils.selector", "qualname": "ElementBlockSelector", "type": "class", "doc": "<p>Selects a subset of an element block's components.</p>\n", "bases": "_ObjectSelector"}, {"fullname": "exodusutils.selector.ElementBlockSelector.__init__", "modulename": "exodusutils.selector", "qualname": "ElementBlockSelector.__init__", "type": "function", "doc": "<p>Create a new selector object for an element block.</p>\n\n<p>Pass in <code>...</code> to select everything, <code>None</code> to select nothing, or a list of specific values.\nLists will be sorted upon entry to maintain element order consistency.</p>\n\n<p><code>elements</code>, <code>variables</code>, and <code>attributes</code> take 1-based indices, meaning to select the first and second\nelement you would pass in the list [1, 2].</p>\n\n<p><code>attributes</code> accepts attribute names as well, but you cannot use names and indices together!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>exodus</strong>:  the exodus object this element block is stored in</li>\n<li><strong>obj_id</strong>:  the id of the element block this represents</li>\n<li><strong>elements</strong>:  list of elements to select within this block (1-based)</li>\n<li><strong>variables</strong>:  the variable indices to select (1-based)</li>\n<li><strong>attributes</strong>:  the attribute indices (1-based) or a list of attribute names to select</li>\n</ul>\n", "signature": "(\n    self,\n    exodus: exodusutils.exodus.Exodus,\n    obj_id: int,\n    elements=Ellipsis,\n    variables=Ellipsis,\n    attributes=Ellipsis\n)", "funcdef": "def"}, {"fullname": "exodusutils.selector.NodeSetSelector", "modulename": "exodusutils.selector", "qualname": "NodeSetSelector", "type": "class", "doc": "<p>Selects a subset of a node set's components.</p>\n", "bases": "_ObjectSelector"}, {"fullname": "exodusutils.selector.NodeSetSelector.__init__", "modulename": "exodusutils.selector", "qualname": "NodeSetSelector.__init__", "type": "function", "doc": "<p>Create a new selector object for a node set.</p>\n\n<p>Pass in <code>...</code> to select everything, <code>None</code> to select nothing, or a list of specific values.\nLists will be sorted upon entry to maintain node order consistency.</p>\n\n<p><code>nodes</code> and <code>variables</code> take 1-based indices, meaning to select the first and second node you would pass in\nthe list [1, 2].</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>exodus</strong>:  the exodus object this node set is stored in</li>\n<li><strong>obj_id</strong>:  the id of the node set this represents</li>\n<li><strong>nodes</strong>:  list of nodes to select within this set (1-based)</li>\n<li><strong>variables</strong>:  the variable indices to select (1-based)</li>\n</ul>\n", "signature": "(\n    self,\n    exodus: exodusutils.exodus.Exodus,\n    obj_id: int,\n    nodes=Ellipsis,\n    variables=Ellipsis\n)", "funcdef": "def"}, {"fullname": "exodusutils.selector.SideSetSelector", "modulename": "exodusutils.selector", "qualname": "SideSetSelector", "type": "class", "doc": "<p>Selects a subset of a side set's components.</p>\n", "bases": "_ObjectSelector"}, {"fullname": "exodusutils.selector.SideSetSelector.__init__", "modulename": "exodusutils.selector", "qualname": "SideSetSelector.__init__", "type": "function", "doc": "<p>Create a new selector object for a side set.</p>\n\n<p>Pass in <code>...</code> to select everything, <code>None</code> to select nothing, or a list of specific values.\nLists will be sorted upon entry to maintain node order consistency.</p>\n\n<p><code>sides</code> and <code>variables</code> take 1-based indices, meaning to select the first and second side you would pass in\n the list [1, 2].</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>exodus</strong>:  the exodus object this side set is stored in</li>\n<li><strong>obj_id</strong>:  the id of the side set this represents</li>\n<li><strong>sides</strong>:  list of sides to select within this set (1-based)</li>\n<li><strong>variables</strong>:  the variable indices to select (1-based)</li>\n</ul>\n", "signature": "(\n    self,\n    exodus: exodusutils.exodus.Exodus,\n    obj_id: int,\n    sides=Ellipsis,\n    variables=Ellipsis\n)", "funcdef": "def"}, {"fullname": "exodusutils.selector.PropertySelector", "modulename": "exodusutils.selector", "qualname": "PropertySelector", "type": "class", "doc": "<p>Select a subset of object properties.</p>\n"}, {"fullname": "exodusutils.selector.PropertySelector.__init__", "modulename": "exodusutils.selector", "qualname": "PropertySelector.__init__", "type": "function", "doc": "<p>Create a new object property selector.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>exodus</strong>:  the exodus object whose properties this refers to</li>\n<li><strong>eb_prop</strong>:  list of all element block properties to keep by name</li>\n<li><strong>ns_prop</strong>:  list of all node set properties to keep by name</li>\n<li><strong>ss_prop</strong>:  list of all side set properties to keep by name</li>\n</ul>\n", "signature": "(\n    self,\n    exodus: exodusutils.exodus.Exodus,\n    eb_prop=Ellipsis,\n    ns_prop=Ellipsis,\n    ss_prop=Ellipsis\n)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();